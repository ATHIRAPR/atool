<?php
require_once ("include/init.php.inc");
require_once ("include/smarty.php.inc");
require_once ("include/db.php.inc");
require_once ("include/auth.php.inc");
require_once ("include/util.php.inc");
// 選択された左メニュー項目
$smarty->assign ( "func_info", array (
		"file" => 1 
) );
// ファイル管理権限が無い場合は、エラーにする
if ($role_info ['file_role_flg'] != 1) {
	// エラーメッセージ表示
	show_error_page ( array (
			"ファイル管理者の権限がありません" 
	), "manage.php", "トップページへ戻る" );
	exit ();
}
// カテゴリマスタから情報を取得
$cmm = new ClinicMasterManager ();
$clinic_all = $cmm->get_all ();
foreach ( $clinic_all as $clinic ) {
	$clinic_options [$clinic ['id']] = $clinic ['clinic_nm'];
}
// 文書種別マスタから情報を取得
$dmm = new DoctypeMasterManager ();
$doctype_all = $dmm->get_all ();
foreach ( $doctype_all as $doctype ) {
	$doctype_options [$doctype ['id']] = $doctype ['type_nm'];
}
$doctype_options ['99'] = "その他";
$smarty->assign ( "clinic_options", $clinic_options );
$smarty->assign ( "doctype_options", $doctype_options );
if ($_SERVER ['REQUEST_METHOD'] === "GET") {
	// 登録画面表示
	show_template_page ( "add_file.tpl.html" );
	exit ();
} else if ($_SERVER ['REQUEST_METHOD'] === "POST") {
	// 新規登録処理
	$file_nm = mb_convert_encoding ( $_FILES ['pdf_file'] ['name'], "UTF-8", $OUTPUT_ENCODING ); // 現行ファイル名
	$filesize = $_FILES ['pdf_file'] ['size']; // ファイルサイズ
	$download_file_nm = substr ( mb_convert_encoding ( $_POST ['download_filename'], "UTF-8", $OUTPUT_ENCODING ), 0, 100 );
	$pdf_password = substr ( $_POST ['pdf_password'], 0, 50 );
	$title = substr ( mb_convert_encoding ( $_POST ['title'], "UTF-8", $OUTPUT_ENCODING ), 0, 1000 );
	$clinic_id = $_POST ['clinic_id'];
	$doctype_id = mb_convert_encoding ( $_POST ['doctype_id'], "UTF-8", $OUTPUT_ENCODING );
	$publish_start_dt = $_POST ['publish_start_dt'];
	$download_update_dt = $_POST ['download_update_dt'];
	$status_flg = $_POST ['status_flg'];
	// 入力チェック 文書種別、pdfファイル、タイトル、カテゴリは必須
	if (! $file_nm) {
		// アップロードファイルが指定されなかった
		// エラーメッセージ表示
		$msg_array [] = "ファイルがアップロードされていません";
	}
	if (! mb_check_encoding ( $file_nm, "ASCII" )) {
		// ファイル名に全角文字を利用しているかチェック
		$msg_array [] = "ファイル名に全角文字を含んだファイルはアップロードできません";
	}
	if (! $title) {
		// タイトルチェック
		$msg_array [] = "タイトルが入力されていません";
	}
	if (0 == count ( $clinic_id )) {
		// カテゴリの選択チェック
		$msg_array [] = "カテゴリが選択されていません";
	}
	if (! isset ( $doctype_id ) || empty ( $doctype_id )) {
		$msg_array [] = "文書種別が指定されていません。";
	}
	if (! $publish_start_dt) {
		// タイトルチェック
		$msg_array [] = "公開日（掲載開始日）が入力されていません";
	}
	if (0 < $msg_array) {
		// ファイル新規登録の入力画面を表示する(エラーメッセージ)
		$smarty->assign ( "data", $_POST );
		show_template_page ( "add_file.tpl.html", $msg_array );
		exit ();
	}
	if (empty ( $download_file_nm )) {
		$download_file_nm = $file_nm;
	}
	$download_file_nm = pathinfo ( $download_file_nm, PATHINFO_FILENAME ) . 'pdf';
	$publish_start_dt .= " 12:00:00";
	$file_info = array ();
	$file_info ['file_nm'] = $file_nm;
	$file_info ['filesize'] = $filesize;
	$file_info ['download_file_nm'] = $download_file_nm;
	$file_info ['title'] = $title;
	$file_info ['doctype_id'] = $doctype_id;
	$file_info ['publish_start_dt'] = $publish_start_dt;
	$file_info ['status_flg'] = 0;
	if (! empty ( $pdf_password )) {
		$file_info ['pdf_password'] = $pdf_password;
	}
	if (! empty ( $download_update_dt )) {
		$download_update_dt .= " 12:00:00";
		$file_info ['download_update_dt'] = $download_update_dt;
	}
	// カテゴリID配列から、ファイル情報テーブルのclinic_flg_ary格納形式に変換する
	$clinic_flg_ary = str_pad ( "", 30, '0' );
	foreach ( $clinic_id as $clinic_flg ) {
		$clinic_flg_ary [$clinic_flg - 1] = '1'; // 選択されたカテゴリのフラグをセットする
	}
	$file_info ['clinic_flg_ary'] = $clinic_flg_ary;
	// 最終更新者のIDをセッションから取得
	$update_user_id = $_SESSION ['login_info'] ['id'];
	// ファイル情報をセット
	$file_info ['filepath'] = "";
	$file_info ['update_user_id'] = $update_user_id;
	$file_info ['update_dt'] = date ( "Y/m/d H:i:s" );
	$file_info ['delete_flg'] = 0;
	// ファイル詳細情報を新規に登録する
	// トランザクション開始
	beginTransaction ();
	$fim = new FileInfoManager ();
	$file_id = $fim->add ( $file_info ); // ファイル新規追加
	if (! $file_id) {
		// ファイル情報の登録に失敗
		// ロールバック
		rollBack ();
		show_error_page ( array (
				"ファイル情報の新規登録に失敗しました" 
		), "manage_file.php", "ファイル管理へ戻る" );
		exit ();
	}
	$eim = new EditInfoManager ();
	$file_info ['id'] = $file_id;
	$file_info ['status_flg'] = $status_flg;
	unset ( $file_info ['delete_flg'] );
	// 編集ファイル新規追加
	if (! $eim->add ( $file_info )) {
		// ロールバック
		rollBack ();
		show_error_page ( array (
				"ファイル編集情報の新規登録に失敗しました" 
		), "manage_file.php", "ファイル管理へ戻る" );
		exit ();
	}
	// ハッシュIDを生成する
	$hash = $fim->set_url_hash ( $file_id );
	if ($hash) {
		// DB処理完了、コミット待ち
		// 生成されたファイル詳細IDから、格納ディレクトリの相対パスを生成する
		$store_path = get_file_stored_dir ( $file_id );
		// フルパス取得
		$store_fullpath = $UPLOAD_DIR . $store_path;
		if (! file_exists ( $store_fullpath ) && ! is_dir ( $store_fullpath )) {
			$ret = mkdir ( $store_fullpath, 0777, true ); // 格納先ディレクトリを作成
			if (! $ret) {
				// ロールバック
				rollBack ();
				show_error_page ( array (
						"ファイル格納先ディレクトリの作成に失敗しました" 
				), "manage_file.php", "ファイル管理へ戻る" );
				exit ();
			}
		}
		// 格納ディレクトリ内のファイル数を返す
		$pdf_num = get_stored_file_num ( $store_fullpath );
		// 連番ファイル名を取得する
		$store_filename = $file_nm . "_" . sprintf ( "%02d", $pdf_num );
		// ファイルパス情報を更新する
		$ret = $fim->set ( $file_id, array (
				"filepath" => $store_path . "/" . $store_filename 
		) );
		if (! $ret) {
			// ロールバック
			rollBack ();
			show_error_page ( array (
					"ファイル情報の格納先パスの更新に失敗しました" 
			), "manage_file.php", "ファイル管理へ戻る" );
			exit ();
		}
		// ファイルパス情報を更新する
		$ret = $eim->set ( $file_id, array (
				"filepath" => $store_path . "/" . $store_filename 
		) );
		if (! $ret) {
			// ロールバック
			rollBack ();
			show_error_page ( array (
					"ファイル情報の格納先パスの更新(編集)に失敗しました" 
			), "manage_file.php", "ファイル管理へ戻る" );
			exit ();
		}
		// アップロードファイルを規定の格納ディレクトリに移動させる
		$tmp_file = $_FILES ['pdf_file'] ['tmp_name'];
		if (! move_uploaded_file ( $tmp_file, $store_fullpath . "/" . $store_filename )) {
			// アップロードファイルの移動に失敗した
			rollBack ();
			// エラーメッセージ表示
			show_error_page ( array (
					"アップロードファイルの格納ディレクトリへの移動に失敗しました" 
			), "manage_file.php", "ファイル管理へ戻る" );
			exit ();
		}
	} else {
		// url_hashの生成に失敗した
		// ロールバック
		rollBack ();
		show_error_page ( array (
				"公開URLの生成に失敗しました" 
		), "manage_file.php", "ファイル管理へ戻る" );
		exit ();
	}
	// コミット
	commit ();
	$smarty->assign ( "is_succeed", true );
	$smarty->assign ( "file_id", $file_id );
	show_template_page ( "add_file_result.tpl.html" );
}
exit ();
?>
