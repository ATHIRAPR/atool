<?php
try {
    $dbh = new PDO ( $DB_DSN, $DB_USER, $DB_PWD );
    if (PHP_OS !== 'WINNT') {
        $stmt = $dbh->query ( "USE $DB_NAME;" );
    }
} catch ( Exception $e ) {
    // DB接続エラー
    // header("Content-Type: text/html; charset='UTF-8'");
    echo "Database Connection Error!";
    print_r ( $e );
    exit ();
}

/**
 * ************************
 * クラス定義
 * ************************
 */

// マスターテーブル管理の抽象クラス
abstract class MasterManager {
    protected $table_name;
    // 1件取得
    function get($id) {
        global $dbh;
        $sql = "SELECT * FROM $this->table_name WHERE id = ?";
        $stmt = $dbh->prepare ( $sql );
        $stmt->bindValue ( 1, $id );
        if ($stmt->execute ()) {
            $rs = $stmt->fetch ( PDO::FETCH_ASSOC );
            return $rs;
        } else {
            $arr = $stmt->errorInfo ();
            global $DB_LOG_FILE;
            log_db_error ( $DB_LOG_FILE, $arr, $sql, "get" );
        }
        return false;
    }
    function get_all() {
        global $dbh;
        $sql = "SELECT * FROM $this->table_name ORDER BY id";
        $stmt = $dbh->prepare ( $sql );
        if ($stmt->execute ()) {
            return $rs_all = $stmt->fetchAll ( PDO::FETCH_ASSOC );
        } else {
            $arr = $stmt->errorInfo ();
            global $DB_LOG_FILE;
            log_db_error ( $DB_LOG_FILE, $arr, $sql, "get_all" );
            return false;
        }
    }
    function add($info) {
        global $dbh;
        $sql = "INSERT INTO $this->table_name ";
        foreach ( $info as $key => $value ) {
            $columns [] = $key;
            $values [] = $value;
            $binds [] = "?";
        }
        $sql .= "(" . join ( ", ", $columns ) . ") VALUES (" . join ( ", ", $binds ) . ")";
        $stmt = $dbh->prepare ( $sql );
        for($i = 0; $i < count ( $values ); $i ++) {
            $stmt->bindValue ( $i + 1, $values [$i] );
        }
        if ($stmt->execute ()) {
            return get_identity ();
        } else {
            $arr = $stmt->errorInfo ();
            global $DB_LOG_FILE;
            log_db_error ( $DB_LOG_FILE, $arr, $sql, "add" );
            return false;
        }
    }
}

// 情報テーブル管理の抽象クラス
class InfoManager {
    protected $table_name;
    function add($info) {
        global $dbh;
        $sql = "INSERT INTO $this->table_name ";
        foreach ( $info as $key => $value ) {
            $columns [] = $key;
            $values [] = $value;
            $binds [] = "?";
        }
        $sql .= "(" . join ( ", ", $columns ) . ") VALUES (" . join ( ", ", $binds ) . ")";
        $stmt = $dbh->prepare ( $sql );
        for($i = 0; $i < count ( $values ); $i ++) {
            $stmt->bindValue ( $i + 1, $values [$i] );
        }
        if ($stmt->execute ()) {
            $new_id = get_identity ( $stmt );
            if (! $new_id) {
                // レコード挿入時に明示的にIDが指定されている場合、新規IDが空になる
                $new_id = $info ['id']; // 指定されたIDを返す
            }
            return $new_id;
        } else {
            $arr = $stmt->errorInfo ();
            global $DB_LOG_FILE;
            log_db_error ( $DB_LOG_FILE, $arr, $sql, "add", $info );
            return false;
        }
    }
    // 1件取得
    function get($id) {
        global $dbh;
        $sql = "SELECT * FROM $this->table_name WHERE id = ?";
        $stmt = $dbh->prepare ( $sql );
        $stmt->bindValue ( 1, $id );
        if ($stmt->execute ()) {
            $rs = $stmt->fetch ( PDO::FETCH_ASSOC );
            return $rs;
        } else {
            $arr = $stmt->errorInfo ();
            global $DB_LOG_FILE;
            log_db_error ( $DB_LOG_FILE, $arr, $sql, "get" );
        }
        return false;
    }
    function get_all() {
        global $dbh;
        $sql = "SELECT * FROM $this->table_name ";
        $stmt = $dbh->prepare ( $sql );
        if ($stmt->execute ()) {
            $rs_all = $stmt->fetchAll ( PDO::FETCH_ASSOC );
            global $DB_LOG_FILE;
            log_db_error ( $DB_LOG_FILE, $arr, $sql, "get_all" );
            return $rs_all;
        }
        return false;
    }
    // 1件更新
    function set($id, $info) {
        global $dbh;
        $sql = "UPDATE $this->table_name ";
        foreach ( $info as $key => $value ) {
            $columns [] = "$key = ?";
            $values [] = $value;
        }
        $sql .= "SET " . join ( ", ", $columns ) . " WHERE id = ?";
        $stmt = $dbh->prepare ( $sql );
        for($i = 0; $i < count ( $values ); $i ++) {
            if (is_null ( $values [$i] )) {
                $stmt->bindValue ( $i + 1, $values [$i], PDO::PARAM_NULL );
            } else {
                $stmt->bindValue ( $i + 1, $values [$i] );
            }
        }
        $stmt->bindValue ( $i + 1, $id );
        $ret = $stmt->execute ();
        if (! $ret) {
            $arr = $stmt->errorInfo ();
            global $DB_LOG_FILE;
            log_db_error ( $DB_LOG_FILE, $arr, $sql, "set" );
            return false;
        }
        return true;
    }
    // 1件削除
    function remove($id) {
        global $dbh;
        $sql = "DELETE FROM $this->table_name WHERE id = ?";
        $stmt = $dbh->prepare ( $sql );
        $stmt->bindValue ( 1, $id );
        $ret = $stmt->execute ();
        if (! $ret) {
            $arr = $stmt->errorInfo ();
            global $DB_LOG_FILE;
            log_db_error ( $DB_LOG_FILE, $arr, $sql, "remove" );
            return false;
        }
        return true;
    }
}

// user_infoテーブル管理のクラス
class UserInfoManager extends InfoManager {
    public static $TABLE_NAME = "user_info";
    function UserInfoManager() {
        $this->table_name = self::$TABLE_NAME;
    }
    // 指定のログインIDとパスワードでログイン認証を行う
    function login($login_nm, $password) {
        global $dbh;
        $sql = "SELECT id, login_nm, status_flg, role_id, user_nm, department_nm, tel, email, GETDATE() AS login_dt" . //
" FROM $this->table_name WHERE login_nm = ? AND password = ? AND status_flg = 1";
        $stmt = $dbh->prepare ( $sql );
        $stmt->bindValue ( 1, $login_nm );
        $stmt->bindValue ( 2, $password );
        if ($stmt->execute ()) {
            $rs = $stmt->fetch ( PDO::FETCH_ASSOC );
            if ($rs) {
                return $rs; // ログイン成功
            } else {
                return false; // ログイン失敗
            }
        } else {
            $arr = $stmt->errorInfo ();
            global $DB_LOG_FILE;
            log_db_error ( $DB_LOG_FILE, $arr, $sql, "login" );
            return false; // DBエラー、ログイン失敗
        }
    }
    // 指定のログインIDが存在するかどうかをチェックする
    function search_user_nm($login_nm) {
        global $dbh;
        $sql = "SELECT id, login_nm, status_flg, role_id, user_nm, department_nm, tel, email, GETDATE() AS login_dt" . //
" FROM $this->table_name WHERE login_nm = ?";
        $stmt = $dbh->prepare ( $sql );
        $stmt->bindValue ( 1, $login_nm );
        if ($stmt->execute ()) {
            $rs = $stmt->fetch ( PDO::FETCH_ASSOC );
            return $rs;
        } else {
            $arr = $stmt->errorInfo ();
            global $DB_LOG_FILE;
            log_db_error ( $DB_LOG_FILE, $arr, $sql, "search_user_nm" );
            return false; // 失敗
        }
    }
}

// file_infoテーブル管理のクラス
class FileInfoManager extends InfoManager {
    public static $TABLE_NAME = "file_info";
    function FileInfoManager() {
        $this->table_name = self::$TABLE_NAME;
    }
    // 指定されたファイルIDで登録済みのファイル情報を取得する
    function get($id) {
        global $dbh;
        $sql = "SELECT * FROM $this->table_name WHERE id = ? AND delete_flg = 0";
        $stmt = $dbh->prepare ( $sql );
        $stmt->bindValue ( 1, $id );
        if ($stmt->execute ()) {
            $rs = $stmt->fetch ( PDO::FETCH_ASSOC );
            return $rs;
        } else {
            $arr = $stmt->errorInfo ();
            global $DB_LOG_FILE;
            log_db_error ( $DB_LOG_FILE, $arr, $sql, "get" );
        }
        return false;
    }
    // ファイル情報を削除する(削除フラグセット)
    function remove($id) {
        global $dbh;
        $sql = "UPDATE $this->table_name SET delete_flg = 1 WHERE id = ?";
        $stmt = $dbh->prepare ( $sql );
        $stmt->bindValue ( 1, $id );
        $ret = $stmt->execute ();
        if (! $ret) {
            $arr = $stmt->errorInfo ();
            global $DB_LOG_FILE;
            log_db_error ( $DB_LOG_FILE, $arr, $sql, "remove" );
            return false;
        }
        return true;
    }
    function set_url_hash($id) {
        global $dbh;
        $sql = "UPDATE $this->table_name SET url_hash = newid() WHERE id = ?";
        $stmt = $dbh->prepare ( $sql );
        $stmt->bindValue ( 1, $id );
        $ret = $stmt->execute ();
        if (! $ret) {
            $arr = $stmt->errorInfo ();
            global $DB_LOG_FILE;
            log_db_error ( $DB_LOG_FILE, $arr, $sql, "set_url_hash" );
            return false;
        }
        return true;
    }
    // 指定されたurl_hashに紐付いているファイル詳細情報を取得する
    function search_url_hash($url_hash) {
        global $dbh;
        // 指定されたファイルIDの条件に該当一致する公開設定情報を取得する
        $sql = "SELECT * FROM $this->table_name WHERE url_hash = ? and delete_flg != 1";
        $stmt = $dbh->prepare ( $sql );
        $stmt->bindValue ( 1, $url_hash );
        if ($stmt->execute ()) {
            $rs = $stmt->fetch ( PDO::FETCH_ASSOC );
            return $rs;
        } else {
            $arr = $stmt->errorInfo ();
            global $DB_LOG_FILE;
            log_db_error ( $DB_LOG_FILE, $arr, $sql, "search_info_array" );
        }
        return false;
    }
}

// v_file_infoテーブル管理のクラス
class VFileInfoManager extends FileInfoManager {
    public static $TABLE_NAME = "v_file_info";
    function VFileInfoManager() {
        $this->table_name = self::$TABLE_NAME;
    }
}

// v_file_info_developテーブル管理のクラス
class VFileInfoDevelopManager extends FileInfoManager {
    public static $TABLE_NAME = "v_file_info_develop";
    function VFileInfoDevelopManager() {
        $this->table_name = self::$TABLE_NAME;
    }
}

// edit_infoテーブル管理のクラス
class EditInfoManager extends InfoManager {
    public static $TABLE_NAME = "edit_info";
    function EditInfoManager() {
        $this->table_name = self::$TABLE_NAME;
    }
}

// doc_authority_infoテーブル管理のクラス
class DocAuthorityInfoManager extends InfoManager {
    public static $TABLE_NAME = "doc_authority_info";
    function DocAuthorityInfoManager() {
        $this->table_name = self::$TABLE_NAME;
    }
    // 指定されたグループレベルで閲覧可能な文書種別IDを取得する
    function search_doctype_id($group_lvl) {
        global $dbh;
        $sql = "SELECT * FROM $this->table_name WHERE group_lvl = ?  order by doctype_id";
        $stmt = $dbh->prepare ( $sql );
        $stmt->bindValue ( 1, $group_lvl );
        if ($stmt->execute ()) {
            $rs = $stmt->fetchAll ( PDO::FETCH_ASSOC );
            return $rs;
        } else {
            $arr = $stmt->errorInfo ();
            global $DB_LOG_FILE;
            log_db_error ( $DB_LOG_FILE, $arr, $sql, "get" );
        }
        return false;
    }
    // 削除
    function remove_all() {
        global $dbh;
        $sql = "DELETE FROM $this->table_name";
        $stmt = $dbh->prepare ( $sql );
        $stmt->bindValue ( 1, $id );
        $ret = $stmt->execute ();
        if (! $ret) {
            $arr = $stmt->errorInfo ();
            global $DB_LOG_FILE;
            log_db_error ( $DB_LOG_FILE, $arr, $sql, "remove_all" );
            return false;
        }
        return true;
    }
}

// doctype_masterテーブル管理のクラス
class DoctypeMasterManager extends MasterManager {
    public static $TABLE_NAME = "doctype_master";
    function DoctypeMasterManager() {
        $this->table_name = self::$TABLE_NAME;
    }
    function get_all() {
        global $dbh;
        $sql = "SELECT * FROM $this->table_name WHERE sort_order IS NOT NULL ORDER BY sort_order ASC";
        $stmt = $dbh->prepare ( $sql );
        if ($stmt->execute ()) {
            $rs_all = $stmt->fetchAll ( PDO::FETCH_ASSOC );
            return $rs_all;
        } else {
            $arr = $stmt->errorInfo ();
            global $DB_LOG_FILE;
            log_db_error ( $DB_LOG_FILE, $arr, $sql, "get_all" );
        }
        return false;
    }
}

// clinic_masterテーブル管理のクラス
class ClinicMasterManager extends MasterManager {
    public static $TABLE_NAME = "clinic_master";
    function ClinicMasterManager() {
        $this->table_name = self::$TABLE_NAME;
    }
}

// role_masterテーブル管理のクラス
class RoleMasterManager extends MasterManager {
    public static $TABLE_NAME = "role_master";
    function RoleMasterManager() {
        $this->table_name = self::$TABLE_NAME;
    }
}

// m_user_groupテーブル管理のクラス
class UserGroupMasterManager extends MasterManager {
    public static $TABLE_NAME = "[MTMT].[dbo].[m_user_group]";
    function UserGroupMasterManager() {
        $this->table_name = self::$TABLE_NAME;
    }
    function get_all() {
        global $dbh;
        $sql = "SELECT * FROM $this->table_name";
        $stmt = $dbh->prepare ( $sql );
        if ($stmt->execute ()) {
            $rs_all = $stmt->fetchAll ( PDO::FETCH_ASSOC );
            global $DB_LOG_FILE;
            log_db_error ( $DB_LOG_FILE, $arr, $sql, "get_all" );
            return $rs_all;
        }
        return false;
    }
}

// download_logテーブル管理のクラス
class DownloadLogManager extends InfoManager {
    public static $TABLE_NAME = "download_log";
    function DownloadLogManager() {
        $this->table_name = self::$TABLE_NAME;
    }
}

/**
 * ************************
 * 関数定義
 * ************************
 */

// トランザクション開始
function beginTransaction() {
    global $dbh;
    if (PHP_OS === 'WINNT') {
        $ret = $dbh->beginTransaction ();
    } else {
        $sql = "BEGIN TRANSACTION";
        $stmt = $dbh->prepare ( $sql );
        $ret = $stmt->execute ();
    }
    if ($ret) {
        return true;
    } else {
        $arr = $stmt->errorInfo ();
        global $DB_LOG_FILE;
        log_db_error ( $DB_LOG_FILE, $arr, $sql, "beginTransaction" );
    }
    return false;
}

// ロールバック
function rollBack() {
    global $dbh;
    if (PHP_OS === 'WINNT') {
        $ret = $dbh->rollBack ();
    } else {
        $sql = "ROLLBACK";
        $stmt = $dbh->prepare ( $sql );
        $ret = $stmt->execute ();
    }
    if ($ret) {
        return true;
    } else {
        $arr = $stmt->errorInfo ();
        global $DB_LOG_FILE;
        log_db_error ( $DB_LOG_FILE, $arr, $sql, "rollBack" );
    }
    return false;
}

// コミット
function commit() {
    global $dbh;
    if (PHP_OS === 'WINNT') {
        $ret = $dbh->commit ();
    } else {
        $sql = "COMMIT";
        $stmt = $dbh->prepare ( $sql );
        $ret = $stmt->execute ();
    }
    if ($ret) {
        return true;
    } else {
        $arr = $stmt->errorInfo ();
        global $DB_LOG_FILE;
        log_db_error ( $DB_LOG_FILE, $arr, $sql, "commit" );
    }
    return false;
}

// 自動採番されたidを取得する
function get_identity($stmt) {
    global $dbh;
    if (PHP_OS === 'WINNT') {
        $inserted_id = $dbh->lastInsertId ();
        return $inserted_id;
    } else {
        $sql = "SELECT SCOPE_IDENTITY() AS insert_id";
        $stmt = $dbh->prepare ( $sql );
        $ret = $stmt->execute ();
        $rs = $stmt->fetch ( PDO::FETCH_ASSOC );
        if ($rs) {
            $inserted_id = $rs ['insert_id'];
        }
        if ($inserted_id) {
            return $inserted_id;
        } else {
            $arr = $stmt->errorInfo ();
            global $DB_LOG_FILE;
            log_db_error ( $DB_LOG_FILE, $arr, $sql, "get_identity" );
        }
    }
    return false;
}

// 指定されたログインID、ユーザ名、権限ID、状態でユーザ情報を検索し、その結果を返す
function search_user_info($login_nm, $user_nm, $role_id, $status_flg) {
    global $dbh;
    // 指定された条件に該当一致するユーザ情報を取得する
    $sql = "SELECT" . //
"   ui.id" . //
" , ui.login_nm" . // ログイン名
" , ui.user_nm" . // ユーザの名前
" , rm.role_nm" . // 権限名
" , ui.status_flg" . // 状態フラグ
" , ui.update_dt" . // 作業日時
" FROM " . UserInfoManager::$TABLE_NAME . " ui JOIN " . RoleMasterManager::$TABLE_NAME . " rm ON rm.id = ui.role_id";
    if ($login_nm) {
        if (! $where) {
            $where = " WHERE";
        } else {
            $where .= " AND";
        }
        $where .= " ui.login_nm LIKE ?"; // ログイン名
        $binds [] = "%$login_nm%";
    }
    if ($user_nm) {
        if (! $where) {
            $where = " WHERE";
        } else {
            $where .= " AND";
        }
        $where .= " user_nm LIKE ?"; // ユーザ名前
        $binds [] = "%$user_nm%";
    }
    if (0 < $role_id) {
        if (! $where) {
            $where = " WHERE";
        } else {
            $where .= " AND";
        }
        $where .= " role_id = ?"; // ロールID
        $binds [] = $role_id;
    }
    if (0 <= $status_flg) {
        if (! $where) {
            $where .= " WHERE";
        } else {
            $where .= " AND";
        }
        $where .= " status_flg = ?"; // 状態フラグ
        $binds [] = $status_flg;
    }
    $sql .= $where;
    // 作業日時でソート
    $sql .= " ORDER BY update_dt ASC";
    $stmt = $dbh->prepare ( $sql );
    for($i = 0; $i < count ( $binds ); $i ++) {
        $stmt->bindValue ( $i + 1, $binds [$i] );
    }
    $rs_search = array ();
    if ($stmt->execute ()) {
        $rs_search = $stmt->fetchAll ( PDO::FETCH_ASSOC );
    } else {
        $arr = $stmt->errorInfo ();
        global $DB_LOG_FILE;
        log_db_error ( $DB_LOG_FILE, $arr, $sql, "search_user_info" );
        return false;
    }
    return $rs_search;
}

// 渡されたurl_hashの配列とグループレベルから、閲覧可能なファイル情報を取得して返す
function search_files_from_hash($url_hash_array, $lvl, $develop) {
    global $dbh;
    if ($develop) {
        $finfo = VFileInfoManager::$TABLE_NAME;
        $publish_sql = "";
    } else {
        $finfo = FileInfoManager::$TABLE_NAME;
        $publish_sql = "and (publish_start_dt is null or publish_start_dt < GETDATE())";
    }
    $sql = "SELECT DISTINCT " . "pinfo.id as PID, " . "pinfo.title as title, " . "finfo.doctype_id as DOC_TYPE, " . "finfo.M_VISIBLE as M_VISIBLE, " . "finfo.download_file_nm as download_file_nm, " . "finfo.file_nm as file_nm, " . "finfo.filesize as filesize, " . "finfo.url_hash as url_hash " . "FROM " . "INNER JOIN " . "( " . "SELECT " . "A.id as id, " . "A.doctype_id as doctype_id, " . "FROM " . $finfo . " A " . "WHERE A.status_flg <> 0 " . $publish_sql . ") finfo on pinfo.ID = finfo.PID " . "INNER JOIN " . "( " . "SELECT doctype_id FROM " . DocAuthorityInfoManager::$TABLE_NAME . " WHERE group_lvl = ? " . ") auth ON auth.doctype_id = finfo.doctype_id " . "WHERE finfo.url_hash IN (" . substr ( str_repeat ( ',?', count ( $url_hash_array ) ), 1 ) . ")";
    $stmt = $dbh->prepare ( $sql );
    $stmt->bindValue ( 1, $lvl );
    for($i = 0; $i < count ( $url_hash_array ); $i ++) {
        $stmt->bindValue ( $i + 2, $url_hash_array [$i] );
    }
    $rs_search = array ();
    if ($stmt->execute ()) {
        $rs_search = $stmt->fetchAll ( PDO::FETCH_ASSOC );
    } else {
        $arr = $stmt->errorInfo ();
        global $DB_LOG_FILE;
        log_db_error ( $DB_LOG_FILE, $arr, $sql, "search_files_from_hash" );
        return false;
    }
    return $rs_search;
}

// 指定された文書種別ID、カテゴリID、タイトル、PDF公開、検索公開、変更済みフラグ、ファイル名で公開情報を検索し、その結果を返す
function search_publish_info($file_id, $doctype_id, $clinic_id, $title, $file_nm, $show_sync_target_only) {
    global $dbh;
    // 指定された条件に該当一致するファイル情報＋公開情報を取得する
    $sql = "SELECT" . //
"  fim.id" . //
", ISNULL(eim.doctype_id, fim.doctype_id) AS doctype_id" . //
", ISNULL(eim.clinic_flg_ary, fim.clinic_flg_ary) AS clinic_flg_ary" . //
", ISNULL(eim.title, fim.title) AS title" . //
", ISNULL(eim.download_file_nm, fim.download_file_nm) AS download_file_nm" . //
", ISNULL(eim.file_nm, fim.file_nm) AS file_nm" . //
", ISNULL(eim.filepath, fim.filepath) AS filepath" . //
", ISNULL(eim.filesize, fim.filesize) AS filesize" . //
", ISNULL(eim.url_hash, fim.url_hash) AS url_hash" . //
", ISNULL(eim.pdf_password, fim.pdf_password) AS pdf_password" . //
", ISNULL(eim.publish_start_dt, fim.publish_start_dt) AS publish_start_dt" . //
", ISNULL(eim.download_update_dt, fim.download_update_dt) AS download_update_dt" . //
", ISNULL(eim.update_user_id, fim.update_user_id) AS update_user_id" . //
", ISNULL(eim.update_dt, fim.update_dt) AS update_dt" . //
", fim.publish_user_id" . //
", fim.publish_dt" . //
", fim.doctype_id AS file_doctype_id" . //
", fim.clinic_flg_ary AS file_clinic_flg_ary" . //
", fim.title AS file_title" . //
", fim.download_file_nm AS file_download_file_nm" . //
", fim.file_nm AS file_file_nm" . //
", fim.filepath AS file_filepath" . //
", fim.filesize AS file_filesize" . //
", fim.url_hash AS file_url_hash" . //
", fim.pdf_password AS file_pdf_password" . //
", fim.publish_start_dt AS file_publish_start_dt" . //
", fim.download_update_dt AS file_download_update_dt" . //
", fim.update_user_id AS file_update_user_id" . //
", fim.update_dt AS file_update_dt" . //
", fim.publish_user_id AS file_publish_user_id" . //
", fim.publish_dt AS file_publish_dt" . //
", fim.status_flg AS file_status_flg" . //
", eim.doctype_id AS edit_doctype_id" . //
", eim.clinic_flg_ary AS edit_clinic_flg_ary" . //
", eim.title AS edit_title" . //
", eim.download_file_nm AS edit_download_file_nm" . //
", eim.file_nm AS edit_file_nm" . //
", eim.filepath AS edit_filepath" . //
", eim.filesize AS edit_filesize" . //
", eim.url_hash AS edit_url_hash" . //
", eim.pdf_password AS edit_pdf_password" . //
", eim.publish_start_dt AS edit_publish_start_dt" . //
", eim.download_update_dt AS edit_download_update_dt" . //
", eim.update_user_id AS edit_update_user_id" . //
", eim.update_dt AS edit_update_dt" . //
", eim.status_flg AS edit_status_flg" . //
" FROM " . FileInfoManager::$TABLE_NAME . " fim";
    // 編集データを結合する
    if ($show_sync_target_only != 1) {
        $sql .= " LEFT";
    } else {
        $sql .= " INNER";
    }
    $sql .= " JOIN " . EditInfoManager::$TABLE_NAME . " eim ON fim.id = eim.id";
    // 削除済みのファイルは除く
    $where .= " WHERE fim.delete_flg = 0";
    if ($file_id) {
        $where .= " AND fim.id = ?";
        $binds [] = $file_id;
    }
    if ($doctype_id) {
        $where .= " AND fim.doctype_id = ?"; // 文書種別
        $binds [] = $doctype_id;
    }
    if ($clinic_id) {
        $where .= " AND SUBSTRING(fim.clinic_flg_ary, $clinic_id, 1) = '1'"; // カテゴリ
    }
    if ($title) {
        $where .= " AND fim.title LIKE ?"; // タイトル
        $binds [] = "%$title%";
    }
    if ($file_nm) {
        $where .= "AND fim.file_nm like ?"; // ファイル名
        $binds [] = "%$file_nm%";
    }
    $sql .= $where;
    $sql .= " ORDER BY update_dt DESC";
    $stmt = $dbh->prepare ( $sql );
    for($i = 0; $i < count ( $binds ); $i ++) {
        $stmt->bindValue ( $i + 1, $binds [$i] );
    }
    $rs_search = array ();
    if ($stmt->execute ()) {
        $rs_search = $stmt->fetchAll ( PDO::FETCH_ASSOC );
    } else {
        $arr = $stmt->errorInfo ();
        global $DB_LOG_FILE;
        log_db_error ( $DB_LOG_FILE, $arr, $sql, "search_publish_info" );
        return false;
    }
    return $rs_search;
}

// 指定された文書種別ID、カテゴリID、タイトル、ファイル名でファイル情報を検索し、その結果を返す
// 文書種別マスタテーブルを結合しないように修正
function search_file_info_ex($doctype_id, $clinic_id, $title, $file_nm) {
    global $dbh;
    // 指定された条件に該当一致するファイル情報を取得する
    $sql = "SELECT" . //
"  info.id" . //
", info.doctype_id" . //
", info.clinic_flg_ary" . //
", info.title" . //
", info.download_file_nm" . //
", info.file_nm" . //
", info.filepath" . //
", info.filesize" . //
", info.url_hash" . //
", info.pdf_password" . //
", info.publish_start_dt" . //
", info.download_update_dt" . //
", info.update_user_id" . //
", info.update_dt" . //
", info.publish_user_id" . //
", info.publish_dt" . //
", info.file_publish_start_dt" . //
", info.file_download_update_dt" . //
", info.file_status_flg" . //
", info.edit_publish_start_dt" . //
", info.edit_download_update_dt" . //
", info.edit_status_flg" . //
" FROM (SELECT" . //
"  fim.id" . //
", ISNULL(eim.doctype_id, fim.doctype_id) AS doctype_id" . //
", ISNULL(eim.clinic_flg_ary, fim.clinic_flg_ary) AS clinic_flg_ary" . //
", ISNULL(eim.title, fim.title) AS title" . //
", ISNULL(eim.download_file_nm, fim.download_file_nm) AS download_file_nm" . //
", ISNULL(eim.file_nm, fim.file_nm) AS file_nm" . //
", ISNULL(eim.filepath, fim.filepath) AS filepath" . //
", ISNULL(eim.filesize, fim.filesize) AS filesize" . //
", ISNULL(eim.url_hash, fim.url_hash) AS url_hash" . //
", ISNULL(eim.pdf_password, fim.pdf_password) AS pdf_password" . //
", ISNULL(eim.publish_start_dt, fim.publish_start_dt) AS publish_start_dt" . //
", ISNULL(eim.download_update_dt, fim.download_update_dt) AS download_update_dt" . //
", ISNULL(eim.update_user_id, fim.update_user_id) AS update_user_id" . //
", ISNULL(eim.update_dt, fim.update_dt) AS update_dt" . //
", fim.publish_user_id" . //
", fim.publish_dt" . //
", fim.publish_start_dt AS file_publish_start_dt" . //
", fim.download_update_dt AS file_download_update_dt" . //
", fim.status_flg AS file_status_flg" . //
", eim.publish_start_dt AS edit_publish_start_dt" . //
", eim.download_update_dt AS edit_download_update_dt" . //
", eim.status_flg AS edit_status_flg" . //
", fim.delete_flg" . //
" FROM " . FileInfoManager::$TABLE_NAME . " fim LEFT JOIN " . EditInfoManager::$TABLE_NAME . " eim ON fim.id = eim.id) info";
    // 削除済みのファイルは除く
    $where .= " WHERE info.delete_flg = 0";
    if ($doctype_id) {
        $where .= " AND info.doctype_id = ?"; // 文書種別
        $binds [] = $doctype_id;
    }
    if ($clinic_id) {
        $where .= " AND SUBSTRING(info.clinic_flg_ary, $clinic_id, 1) = '1'"; // カテゴリ
    }
    if ($title) {
        $where .= " AND info.title LIKE ?"; // タイトル
        $binds [] = "%$title%";
    }
    if ($file_nm) {
        $where = " AND info.file_nm LIKE ?";
        $binds [] = "%$file_nm%";
    }
    $sql .= $where;
    $sql .= " ORDER BY update_dt DESC";
    $stmt = $dbh->prepare ( $sql );
    for($i = 0; $i < count ( $binds ); $i ++) {
        $stmt->bindValue ( $i + 1, $binds [$i] );
    }
    $rs_search = array ();
    if ($stmt->execute ()) {
        $rs_search = $stmt->fetchAll ( PDO::FETCH_ASSOC );
    } else {
        $arr = $stmt->errorInfo ();
        global $DB_LOG_FILE;
        log_db_error ( $DB_LOG_FILE, $arr, $sql, "search_file_info_ex" );
        return false;
    }
    return $rs_search;
}

// DBエラーをログファイルに書き出す
function log_db_error($log_file_path, $err_ary, $sql, $func, $data) {
    // ログファイルを開く
    $hdl = fopen ( $log_file_path, "a+" );
    if ($hdl) {
        // DBログを追記する
        flock ( $hdl, LOCK_EX );
        // 現在日時、関数名、エラー情報、SQLを書き込む
        fprintf ( $hdl, "%s, %s, %s, %s, $s\n", date ( "Y/m/d H:i:s" ), $func, print_r ( $err_ary, true ), $sql, print_r ( $data, true ) );
        flock ( $hdl, LOCK_UN );
        fclose ( $hdl );
        return true;
    }
    return false;
}
?>